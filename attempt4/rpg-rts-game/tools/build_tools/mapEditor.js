// tools/build_tools/MapEditor.js - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ä—Ç
export class MapEditor {
    constructor(canvasId) {
        this.canvas = document.getElementById(canvasId);
        this.ctx = this.canvas.getContext('2d');

        // –†–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã
        this.mapWidth = 1000;
        this.mapHeight = 1000;
        this.tileSize = 32;

        // –ö–∞–º–µ—Ä–∞
        this.camera = {
            x: 0,
            y: 0,
            zoom: 1.0,
            minZoom: 0.1,
            maxZoom: 3.0
        };

        // –ö–∞—Ä—Ç–∞ - 2D –º–∞—Å—Å–∏–≤ —Ç–∞–π–ª–æ–≤
        this.mapData = this.createEmptyMap();

        // –†–µ–∂–∏–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.currentTool = 'terrain';
        this.selectedTerrain = 'grass';
        this.selectedUnit = 'warrior';
        this.selectedBuilding = 'town_hall';
        this.brushSize = 1;

        // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        this.terrainTypes = {
            grass: { color: '#4a8c4a', walkable: true, name: '–¢—Ä–∞–≤–∞' },
            dirt: { color: '#8b4513', walkable: true, name: '–ó–µ–º–ª—è' },
            stone: { color: '#696969', walkable: true, name: '–ö–∞–º–µ–Ω—å' },
            water: { color: '#4169e1', walkable: false, name: '–í–æ–¥–∞' },
            mountain: { color: '#2f4f4f', walkable: false, name: '–ì–æ—Ä—ã' },
            forest: { color: '#228b22', walkable: true, name: '–õ–µ—Å' },
            sand: { color: '#f4a460', walkable: true, name: '–ü–µ—Å–æ–∫' },
            snow: { color: '#fffafa', walkable: true, name: '–°–Ω–µ–≥' },
            lava: { color: '#dc143c', walkable: false, name: '–õ–∞–≤–∞' },
            void: { color: '#000000', walkable: false, name: '–ü—É—Å—Ç–æ—Ç–∞' }
        };

        this.zones = new Map(); // –ò–≥—Ä–æ–≤—ã–µ –∑–æ–Ω—ã
        this.units = new Map(); // –†–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ —é–Ω–∏—Ç—ã
        this.buildings = new Map(); // –†–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è
        this.resources = new Map(); // –†–µ—Å—É—Ä—Å—ã –Ω–∞ –∫–∞—Ä—Ç–µ

        this.isDrawing = false;
        this.lastMousePos = { x: 0, y: 0 };

        this.setupEventListeners();
        this.createEditorUI();
    }

    createEmptyMap() {
        const map = [];
        for (let y = 0; y < this.mapHeight; y++) {
            map[y] = [];
            for (let x = 0; x < this.mapWidth; x++) {
                map[y][x] = {
                    terrain: 'grass',
                    height: 0,
                    zone: null,
                    resources: null,
                    decorations: []
                };
            }
        }
        return map;
    }

    setupEventListeners() {
        // –ú—ã—à—å
        this.canvas.addEventListener('mousedown', (e) => this.handleMouseDown(e));
        this.canvas.addEventListener('mousemove', (e) => this.handleMouseMove(e));
        this.canvas.addEventListener('mouseup', (e) => this.handleMouseUp(e));
        this.canvas.addEventListener('wheel', (e) => this.handleWheel(e));
        this.canvas.addEventListener('contextmenu', (e) => e.preventDefault());

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        document.addEventListener('keydown', (e) => this.handleKeyDown(e));
        document.addEventListener('keyup', (e) => this.handleKeyUp(e));
    }

    createEditorUI() {
            const editorUI = document.createElement('div');
            editorUI.id = 'map-editor-ui';
            editorUI.innerHTML = `
            <div class="editor-panel">
                <h3>üó∫Ô∏è –†–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ä—Ç</h3>
                
                <!-- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã -->
                <div class="tool-section">
                    <h4>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h4>
                    <div class="tool-buttons">
                        <button class="tool-btn active" data-tool="terrain">üå± –õ–∞–Ω–¥—à–∞—Ñ—Ç</button>
                        <button class="tool-btn" data-tool="units">‚öîÔ∏è –Æ–Ω–∏—Ç—ã</button>
                        <button class="tool-btn" data-tool="buildings">üèóÔ∏è –ó–¥–∞–Ω–∏—è</button>
                        <button class="tool-btn" data-tool="resources">üíé –†–µ—Å—É—Ä—Å—ã</button>
                        <button class="tool-btn" data-tool="zones">üéØ –ó–æ–Ω—ã</button>
                        <button class="tool-btn" data-tool="height">‚õ∞Ô∏è –í—ã—Å–æ—Ç–∞</button>
                    </div>
                </div>
                
                <!-- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∏—Å—Ç–∏ -->
                <div class="brush-section">
                    <h4>–ö–∏—Å—Ç—å</h4>
                    <label>–†–∞–∑–º–µ—Ä: <input type="range" id="brush-size" min="1" max="10" value="1"></label>
                    <span id="brush-size-display">1</span>
                </div>
                
                <!-- –õ–∞–Ω–¥—à–∞—Ñ—Ç -->
                <div class="terrain-section" id="terrain-tools">
                    <h4>–õ–∞–Ω–¥—à–∞—Ñ—Ç</h4>
                    <div class="terrain-grid">
                        ${Object.entries(this.terrainTypes).map(([id, terrain]) => 
                            `<div class="terrain-tile ${id === 'grass' ? 'selected' : ''}" 
                                 data-terrain="${id}" 
                                 style="background-color: ${terrain.color}"
                                 title="${terrain.name}">
                            </div>`
                        ).join('')}
                    </div>
                </div>
                
                <!-- –Æ–Ω–∏—Ç—ã -->
                <div class="units-section hidden" id="unit-tools">
                    <h4>–Æ–Ω–∏—Ç—ã</h4>
                    <select id="unit-type">
                        <option value="warrior">‚öîÔ∏è –í–æ–∏–Ω</option>
                        <option value="archer">üèπ –õ—É—á–Ω–∏–∫</option>
                        <option value="mage">üßô‚Äç‚ôÇÔ∏è –ú–∞–≥</option>
                        <option value="worker">üî® –†–∞–±–æ—á–∏–π</option>
                        <option value="hero">üëë –ì–µ—Ä–æ–π</option>
                    </select>
                    <select id="unit-faction">
                        <option value="player">üîµ –ò–≥—Ä–æ–∫</option>
                        <option value="enemy">üî¥ –í—Ä–∞–≥</option>
                        <option value="neutral">‚ö™ –ù–µ–π—Ç—Ä–∞–ª</option>
                    </select>
                </div>
                
                <!-- –ó–¥–∞–Ω–∏—è -->
                <div class="buildings-section hidden" id="building-tools">
                    <h4>–ó–¥–∞–Ω–∏—è</h4>
                    <select id="building-type">
                        <option value="town_hall">üèõÔ∏è –†–∞—Ç—É—à–∞</option>
                        <option value="barracks">üè∞ –ö–∞–∑–∞—Ä–º—ã</option>
                        <option value="workshop">üîß –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è</option>
                        <option value="mage_tower">üóº –ë–∞—à–Ω—è –º–∞–≥–∞</option>
                        <option value="resource_mine">‚õèÔ∏è –®–∞—Ö—Ç–∞</option>
                    </select>
                </div>
                
                <!-- –†–µ—Å—É—Ä—Å—ã -->
                <div class="resources-section hidden" id="resource-tools">
                    <h4>–†–µ—Å—É—Ä—Å—ã</h4>
                    <select id="resource-type">
                        <option value="gold">üü° –ó–æ–ª–æ—Ç–æ</option>
                        <option value="wood">üü§ –î–µ—Ä–µ–≤–æ</option>
                        <option value="stone">‚ö´ –ö–∞–º–µ–Ω—å</option>
                        <option value="food">üü¢ –ï–¥–∞</option>
                        <option value="mana">üü£ –ú–∞–Ω–∞</option>
                    </select>
                    <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <input type="number" id="resource-amount" value="1000" min="100" max="5000" step="100"></label>
                </div>
                
                <!-- –ó–æ–Ω—ã -->
                <div class="zones-section hidden" id="zone-tools">
                    <h4>–ò–≥—Ä–æ–≤—ã–µ –∑–æ–Ω—ã</h4>
                    <select id="zone-type">
                        <option value="spawn_player">üîµ –°–ø–∞–≤–Ω –∏–≥—Ä–æ–∫–∞</option>
                        <option value="spawn_enemy">üî¥ –°–ø–∞–≤–Ω –≤—Ä–∞–≥–∞</option>
                        <option value="objective">üéØ –¶–µ–ª—å</option>
                        <option value="no_build">üö´ –ó–∞–ø—Ä–µ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞</option>
                        <option value="ambush">‚ö° –ó–∞—Å–∞–¥–∞</option>
                        <option value="treasure">üí∞ –°–æ–∫—Ä–æ–≤–∏—â–∞</option>
                    </select>
                </div>
                
                <!-- –ö–∞—Ä—Ç–∞ -->
                <div class="map-section">
                    <h4>–ö–∞—Ä—Ç–∞</h4>
                    <div class="map-info">
                        <p>–†–∞–∑–º–µ—Ä: ${this.mapWidth} x ${this.mapHeight}</p>
                        <p>–ö–∞–º–µ—Ä–∞: <span id="camera-pos">0, 0</span></p>
                        <p>–ó—É–º: <span id="zoom-level">100%</span></p>
                    </div>
                    
                    <div class="map-controls">
                        <button onclick="mapEditor.generateTerrain()">üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è</button>
                        <button onclick="mapEditor.clearMap()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</button>
                        <button onclick="mapEditor.saveMap()">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        <button onclick="mapEditor.loadMap()">üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
                    </div>
                    
                    <input type="file" id="map-file-input" accept=".json" style="display: none;">
                </div>
                
                <!-- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ -->
                <div class="test-section">
                    <h4>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h4>
                    <button onclick="mapEditor.testMap()">‚ñ∂Ô∏è –¢–µ—Å—Ç –∫–∞—Ä—Ç—ã</button>
                    <button onclick="mapEditor.exportToGame()">üéÆ –í –∏–≥—Ä—É</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(editorUI);
        this.setupUIEventListeners();
    }
    
    setupUIEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        document.querySelectorAll('.tool-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.tool-btn').forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                this.currentTool = e.target.dataset.tool;
                this.showToolSection(this.currentTool);
            });
        });
        
        // –í—ã–±–æ—Ä –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞
        document.querySelectorAll('.terrain-tile').forEach(tile => {
            tile.addEventListener('click', (e) => {
                document.querySelectorAll('.terrain-tile').forEach(t => t.classList.remove('selected'));
                e.target.classList.add('selected');
                this.selectedTerrain = e.target.dataset.terrain;
            });
        });
        
        // –†–∞–∑–º–µ—Ä –∫–∏—Å—Ç–∏
        const brushSizeSlider = document.getElementById('brush-size');
        const brushSizeDisplay = document.getElementById('brush-size-display');
        brushSizeSlider.addEventListener('input', (e) => {
            this.brushSize = parseInt(e.target.value);
            brushSizeDisplay.textContent = this.brushSize;
        });
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç—ã
        const fileInput = document.getElementById('map-file-input');
        fileInput.addEventListener('change', (e) => {
            this.loadMapFromFile(e.target.files[0]);
        });
    }
    
    showToolSection(tool) {
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        document.querySelectorAll('.terrain-section, .units-section, .buildings-section, .resources-section, .zones-section').forEach(section => {
            section.classList.add('hidden');
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
        const sectionId = tool + '-tools';
        const section = document.getElementById(sectionId);
        if (section) {
            section.classList.remove('hidden');
        }
    }
    
    handleMouseDown(e) {
        this.isDrawing = true;
        this.lastMousePos = this.getMousePos(e);
        
        if (e.button === 0) { // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            this.handleToolAction(this.lastMousePos, e.ctrlKey);
        } else if (e.button === 2) { // –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞
            this.handleRightClick(this.lastMousePos);
        }
    }
    
    handleMouseMove(e) {
        const mousePos = this.getMousePos(e);
        this.updateCameraInfo(mousePos);
        
        if (this.isDrawing && e.buttons === 1) {
            this.handleToolAction(mousePos, e.ctrlKey);
        }
        
        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã —Å—Ä–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–æ–π
        if (e.buttons === 4) {
            const dx = mousePos.x - this.lastMousePos.x;
            const dy = mousePos.y - this.lastMousePos.y;
            this.camera.x -= dx / this.camera.zoom;
            this.camera.y -= dy / this.camera.zoom;
        }
        
        this.lastMousePos = mousePos;
    }
    
    handleMouseUp(e) {
        this.isDrawing = false;
    }
    
    handleWheel(e) {
        e.preventDefault();
        const zoomFactor = e.deltaY < 0 ? 1.1 : 0.9;
        this.camera.zoom *= zoomFactor;
        this.camera.zoom = Math.max(this.camera.minZoom, Math.min(this.camera.maxZoom, this.camera.zoom));
    }
    
    handleKeyDown(e) {
        switch (e.code) {
            case 'KeyG':
                this.setTool('terrain');
                break;
            case 'KeyU':
                this.setTool('units');
                break;
            case 'KeyB':
                this.setTool('buildings');
                break;
            case 'KeyR':
                this.setTool('resources');
                break;
            case 'KeyZ':
                this.setTool('zones');
                break;
            case 'KeyH':
                this.setTool('height');
                break;
            case 'Space':
                e.preventDefault();
                this.resetCamera();
                break;
            case 'Delete':
                this.clearSelectedArea();
                break;
        }
    }
    
    handleToolAction(pos, isCtrlHeld) {
        const worldPos = this.screenToWorld(pos);
        const tileX = Math.floor(worldPos.x / this.tileSize);
        const tileY = Math.floor(worldPos.y / this.tileSize);
        
        if (!this.isValidTile(tileX, tileY)) return;
        
        switch (this.currentTool) {
            case 'terrain':
                this.paintTerrain(tileX, tileY, isCtrlHeld);
                break;
            case 'units':
                this.placeUnit(tileX, tileY);
                break;
            case 'buildings':
                this.placeBuilding(tileX, tileY);
                break;
            case 'resources':
                this.placeResource(tileX, tileY);
                break;
            case 'zones':
                this.paintZone(tileX, tileY, isCtrlHeld);
                break;
            case 'height':
                this.adjustHeight(tileX, tileY, isCtrlHeld);
                break;
        }
    }
    
    paintTerrain(centerX, centerY, isErasing) {
        const radius = this.brushSize;
        for (let dy = -radius; dy <= radius; dy++) {
            for (let dx = -radius; dx <= radius; dx++) {
                const x = centerX + dx;
                const y = centerY + dy;
                
                if (this.isValidTile(x, y) && dx*dx + dy*dy <= radius*radius) {
                    if (isErasing) {
                        this.mapData[y][x].terrain = 'grass'; // –°—Ç–µ—Ä–µ—Ç—å –≤ —Ç—Ä–∞–≤—É
                    } else {
                        this.mapData[y][x].terrain = this.selectedTerrain;
                    }
                }
            }
        }
    }
    
    placeUnit(x, y) {
        const unitId = `unit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const unitType = document.getElementById('unit-type').value;
        const faction = document.getElementById('unit-faction').value;
        
        this.units.set(unitId, {
            id: unitId,
            type: unitType,
            faction: faction,
            x: x * this.tileSize + this.tileSize / 2,
            y: y * this.tileSize + this.tileSize / 2,
            stats: this.getDefaultUnitStats(unitType),
            bonuses: {}
        });
    }
    
    placeBuilding(x, y) {
        const buildingId = `building_${Date.now()}`;
        const buildingType = document.getElementById('building-type').value;
        
        this.buildings.set(buildingId, {
            id: buildingId,
            type: buildingType,
            x: x * this.tileSize + this.tileSize / 2,
            y: y * this.tileSize + this.tileSize / 2,
            constructed: true
        });
    }
    
    placeResource(x, y) {
        const resourceId = `resource_${Date.now()}`;
        const resourceType = document.getElementById('resource-type').value;
        const amount = parseInt(document.getElementById('resource-amount').value);
        
        this.resources.set(resourceId, {
            id: resourceId,
            type: resourceType,
            x: x * this.tileSize + this.tileSize / 2,
            y: y * this.tileSize + this.tileSize / 2,
            amount: amount,
            maxAmount: amount
        });
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞
    generateTerrain() {
        console.log('üé≤ Generating terrain...');
        
        // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —à—É–º–æ–º –ü–µ—Ä–ª–∏–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        for (let y = 0; y < this.mapHeight; y++) {
            for (let x = 0; x < this.mapWidth; x++) {
                const noise = this.simpleNoise(x * 0.01, y * 0.01);
                
                let terrain = 'grass';
                if (noise < -0.3) terrain = 'water';
                else if (noise < -0.1) terrain = 'sand';
                else if (noise < 0.1) terrain = 'grass';
                else if (noise < 0.3) terrain = 'forest';
                else if (noise < 0.5) terrain = 'stone';
                else terrain = 'mountain';
                
                this.mapData[y][x].terrain = terrain;
                this.mapData[y][x].height = Math.floor((noise + 1) * 50);
            }
        }
    }
    
    simpleNoise(x, y) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à—É–º–∞
        const a = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;
        return (a - Math.floor(a)) * 2 - 1;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞
    saveMap() {
        const mapData = {
            version: '1.0',
            info: {
                name: 'Custom Map',
                width: this.mapWidth,
                height: this.mapHeight,
                tileSize: this.tileSize,
                created: new Date().toISOString()
            },
            terrain: this.mapData,
            units: Array.from(this.units.values()),
            buildings: Array.from(this.buildings.values()),
            resources: Array.from(this.resources.values()),
            zones: Array.from(this.zones.values())
        };
        
        const blob = new Blob([JSON.stringify(mapData, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `map_${Date.now()}.json`;
        a.click();
        
        URL.revokeObjectURL(url);
        console.log('üíæ Map saved!');
    }
    
    loadMap() {
        document.getElementById('map-file-input').click();
    }
    
    async loadMapFromFile(file) {
        if (!file) return;
        
        try {
            const text = await file.text();
            const mapData = JSON.parse(text);
            
            this.mapWidth = mapData.info.width;
            this.mapHeight = mapData.info.height;
            this.mapData = mapData.terrain;
            
            this.units.clear();
            mapData.units?.forEach(unit => this.units.set(unit.id, unit));
            
            this.buildings.clear();
            mapData.buildings?.forEach(building => this.buildings.set(building.id, building));
            
            this.resources.clear();
            mapData.resources?.forEach(resource => this.resources.set(resource.id, resource));
            
            this.zones.clear();
            mapData.zones?.forEach(zone => this.zones.set(zone.id, zone));
            
            console.log('üìÅ Map loaded successfully!');
            
        } catch (error) {
            console.error('‚ùå Failed to load map:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã!');
        }
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
    render() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –ª–∞–Ω–¥—à–∞—Ñ—Ç
        this.renderTerrain();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∑–æ–Ω—ã
        this.renderZones();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ—Å—É—Ä—Å—ã
        this.renderResources();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∑–¥–∞–Ω–∏—è
        this.renderBuildings();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —é–Ω–∏—Ç—ã
        this.renderUnits();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–µ—Ç–∫—É
        this.renderGrid();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∫—É—Ä—Å–æ—Ä –∫–∏—Å—Ç–∏
        this.renderBrushCursor();
    }
    
    renderTerrain() {
        const startX = Math.max(0, Math.floor(this.camera.x / this.tileSize));
        const startY = Math.max(0, Math.floor(this.camera.y / this.tileSize));
        const endX = Math.min(this.mapWidth, Math.ceil((this.camera.x + this.canvas.width / this.camera.zoom) / this.tileSize));
        const endY = Math.min(this.mapHeight, Math.ceil((this.camera.y + this.canvas.height / this.camera.zoom) / this.tileSize));
        
        for (let y = startY; y < endY; y++) {
            for (let x = startX; x < endX; x++) {
                const tile = this.mapData[y][x];
                const terrain = this.terrainTypes[tile.terrain];
                
                const screenPos = this.worldToScreen({
                    x: x * this.tileSize,
                    y: y * this.tileSize
                });
                
                this.ctx.fillStyle = terrain.color;
                this.ctx.fillRect(
                    screenPos.x,
                    screenPos.y,
                    this.tileSize * this.camera.zoom,
                    this.tileSize * this.camera.zoom
                );
            }
        }
    }
    
    // –£—Ç–∏–ª–∏—Ç—ã
    getMousePos(e) {
        const rect = this.canvas.getBoundingClientRect();
        return {
            x: e.clientX - rect.left,
            y: e.clientY - rect.top
        };
    }
    
    screenToWorld(screenPos) {
        return {
            x: (screenPos.x / this.camera.zoom) + this.camera.x,
            y: (screenPos.y / this.camera.zoom) + this.camera.y
        };
    }
    
    worldToScreen(worldPos) {
        return {
            x: (worldPos.x - this.camera.x) * this.camera.zoom,
            y: (worldPos.y - this.camera.y) * this.camera.zoom
        };
    }
    
    isValidTile(x, y) {
        return x >= 0 && x < this.mapWidth && y >= 0 && y < this.mapHeight;
    }
    
    // –ó–∞–ø—É—Å–∫
    start() {
        const gameLoop = () => {
            this.render();
            requestAnimationFrame(gameLoop);
        };
        gameLoop();
        console.log('üó∫Ô∏è Map Editor started!');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
window.mapEditor = new MapEditor('game-canvas');

console.log('üó∫Ô∏è Advanced Map Editor loaded!');